package views;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import database.*;
/**
 *
 * @author jorge
 */
public class inventory extends javax.swing.JPanel {

    /**
     * Creates new form inventory
     */
    public inventory() {
        initComponents();
        try {
            fillCaseTable(casesDB.get(null));
            fillMicaTable(micaDB.get(null));
            fillPropTable(propDB.get());
            fillPhoneTable(phoneDB.get());
        } catch (SQLException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        casePanel = new javax.swing.JPanel();
        caseTableScroll = new javax.swing.JScrollPane();
        caseTable = new javax.swing.JTable();
        micaPanel = new javax.swing.JPanel();
        micaTableScroll = new javax.swing.JScrollPane();
        micaTable = new javax.swing.JTable();
        propPanel = new javax.swing.JPanel();
        propScrollTable = new javax.swing.JScrollPane();
        propTable = new javax.swing.JTable();
        phonePanel = new javax.swing.JPanel();
        phoneScrollTable = new javax.swing.JScrollPane();
        phoneTable = new javax.swing.JTable();
        searchByTitle = new javax.swing.JLabel();
        searchBy = new javax.swing.JComboBox<>();
        searchText = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        type = new javax.swing.JComboBox<>();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        tabbedPane.setToolTipText("");
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        caseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Tipo", "Marca", "Modelo", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        caseTableScroll.setViewportView(caseTable);
        if (caseTable.getColumnModel().getColumnCount() > 0) {
            caseTable.getColumnModel().getColumn(0).setMaxWidth(128);
            caseTable.getColumnModel().getColumn(4).setMaxWidth(128);
        }

        javax.swing.GroupLayout casePanelLayout = new javax.swing.GroupLayout(casePanel);
        casePanel.setLayout(casePanelLayout);
        casePanelLayout.setHorizontalGroup(
            casePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(caseTableScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        casePanelLayout.setVerticalGroup(
            casePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, casePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(caseTableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Protectores", casePanel);

        micaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Tipo", "Marca", "Modelo", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        micaTableScroll.setViewportView(micaTable);
        if (micaTable.getColumnModel().getColumnCount() > 0) {
            micaTable.getColumnModel().getColumn(0).setMaxWidth(128);
            micaTable.getColumnModel().getColumn(4).setMaxWidth(128);
        }

        javax.swing.GroupLayout micaPanelLayout = new javax.swing.GroupLayout(micaPanel);
        micaPanel.setLayout(micaPanelLayout);
        micaPanelLayout.setHorizontalGroup(
            micaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(micaTableScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        micaPanelLayout.setVerticalGroup(
            micaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, micaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(micaTableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Micas", micaPanel);

        propTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Marca", "Descripcion", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propScrollTable.setViewportView(propTable);
        if (propTable.getColumnModel().getColumnCount() > 0) {
            propTable.getColumnModel().getColumn(0).setMaxWidth(128);
            propTable.getColumnModel().getColumn(3).setMaxWidth(128);
        }

        javax.swing.GroupLayout propPanelLayout = new javax.swing.GroupLayout(propPanel);
        propPanel.setLayout(propPanelLayout);
        propPanelLayout.setHorizontalGroup(
            propPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(propScrollTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        propPanelLayout.setVerticalGroup(
            propPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(propScrollTable, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Accesorios", propPanel);

        phoneTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Marca", "Modelo", "Capacidad", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        phoneScrollTable.setViewportView(phoneTable);
        if (phoneTable.getColumnModel().getColumnCount() > 0) {
            phoneTable.getColumnModel().getColumn(0).setMaxWidth(128);
            phoneTable.getColumnModel().getColumn(4).setMaxWidth(128);
        }

        javax.swing.GroupLayout phonePanelLayout = new javax.swing.GroupLayout(phonePanel);
        phonePanel.setLayout(phonePanelLayout);
        phonePanelLayout.setHorizontalGroup(
            phonePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(phoneScrollTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        phonePanelLayout.setVerticalGroup(
            phonePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, phonePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(phoneScrollTable, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Telefonos", phonePanel);

        searchByTitle.setText("Buscar por:");

        searchBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo", "Marca", "Modelo", "Tipo" }));
        searchBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchByItemStateChanged(evt);
            }
        });

        search.setText(">");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Protector", "Clip", "Otterbox" }));

        edit.setText("Editar");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        delete.setText("x");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchByTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBy, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByTitle)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edit)
                    .addComponent(delete))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        searchText.setVisible(true);
        type.setVisible(false);
        
        DefaultComboBoxModel<String> searchByModel;
        DefaultComboBoxModel<String> typeModel;
        
        switch(tabbedPane.getSelectedIndex()){
            case 0 -> {
                String[] searchByData = {"Codigo","Marca","Modelo","Tipo"};
                searchByModel =  new DefaultComboBoxModel(searchByData);
                
                String[] typeData = {"Protector","Clip","Otterbox"};
                typeModel = new DefaultComboBoxModel(typeData);
            }
            case 1 -> {
                String[] searchByData = {"Codigo","Marca","Modelo","Tipo"};
                searchByModel = new DefaultComboBoxModel(searchByData);
                
                String[] typeData = {"Normal","Completa","Privacidad","Completa"};
                typeModel = new DefaultComboBoxModel(typeData);
            }
            case 2 -> {
                String[] searchByData = {"Codigo","Marca","Descripcion"};
                searchByModel = new DefaultComboBoxModel(searchByData);
                
                String[] typeData = {"Hidden text"};
                typeModel = new DefaultComboBoxModel(typeData);
            }
            default -> {
                String[] searchByData = {"Codigo","Marca","Modelo","Capacidad"};
                searchByModel = new DefaultComboBoxModel(searchByData);
                
                String[] typeData = {"8GB","16GB","32GB","64GB","128GB","256GB","512GB","1TB"};
                typeModel = new DefaultComboBoxModel(typeData);
            }
        }
        searchBy.setModel(searchByModel);
        type.setModel(typeModel);
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        search();
    }//GEN-LAST:event_searchActionPerformed

    private void searchByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchByItemStateChanged
        if(searchBy.getSelectedIndex() != 3){
            type.setVisible(false);
            searchText.setVisible(true);
            searchText.setText("");
        }else{            
            type.setVisible(true);
            searchText.setVisible(false);
            searchText.setText("Hidden text");
        }
    }//GEN-LAST:event_searchByItemStateChanged

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        try{
            switch(tabbedPane.getSelectedIndex()){
                case 0 -> menu.changeContent(new cases(caseTable.getModel().getValueAt(caseTable.getSelectedRow(), 0).toString()), null);
                case 1 -> menu.changeContent(new mica(micaTable.getModel().getValueAt(micaTable.getSelectedRow(), 0).toString()), null);
            }
        }catch(ArrayIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null, "Selecciona un articulo","Error",0);
        }
    }//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try{
            int confirmation = JOptionPane.showConfirmDialog(null, "¿Estas seguro que deseas eliminar este producto?", "Aviso", JOptionPane.YES_NO_OPTION,1);
            
            if(confirmation == 0){
                String code;
                String table;

                switch(tabbedPane.getSelectedIndex()){
                    case 0 -> {
                        code = caseTable.getModel().getValueAt(caseTable.getSelectedRow(), 0).toString();
                        table = "protector";
                    }
                    case 1 -> {
                        code = micaTable.getModel().getValueAt(micaTable.getSelectedRow(), 0).toString();
                        table = "mica";
                    }
                    case 2 -> {
                        code = propTable.getModel().getValueAt(propTable.getSelectedRow(), 0).toString();
                        table = "accesorio";
                    }
                    default -> {
                        code = phoneTable.getModel().getValueAt(phoneTable.getSelectedRow(), 0).toString();
                        table = "telefono";
                    }
                }
                articleDB.delete(code, table);
                fillTablesByIndex();   
            }
        }catch(ArrayIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null, "Selecciona un articulo","Error",0);
        }catch (SQLException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteActionPerformed
    
    private void search(){
        if(!searchText.getText().isBlank()){
            String searchData;
                
            if(searchBy.getSelectedIndex() != 3){
                searchData = searchText.getText();
                searchText.setText("");
            }else{
                searchData = type.getSelectedItem().toString();
            }

            try {            
                switch(tabbedPane.getSelectedIndex()){
                    case 0 -> fillCaseTable(casesDB.searchBy(searchBy.getSelectedItem().toString().toLowerCase(), searchData));
                    case 1 -> fillMicaTable(micaDB.searchBy(searchBy.getSelectedItem().toString().toLowerCase(), searchData));
                    case 2 -> fillPropTable(propDB.searchBy(searchBy.getSelectedItem().toString().toLowerCase(), searchData));
                    default -> fillPhoneTable(phoneDB.searchBy(searchBy.getSelectedItem().toString().toLowerCase(), searchData));
                }
            } catch (SQLException ex) {
                Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            fillTablesByIndex();
        }
    }
    
    public void fillTablesByIndex(){
        try{
            switch(tabbedPane.getSelectedIndex()){
                case 0 -> fillCaseTable(casesDB.get(null));
                case 1 -> fillMicaTable(micaDB.get(null));
                case 2 -> fillPropTable(propDB.get());
                default -> fillPhoneTable(phoneDB.get());
            }
        } catch (SQLException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void fillCaseTable(ResultSet query) throws SQLException{
        String[] data = new String[5];
        
        DefaultTableModel model = (DefaultTableModel) caseTable.getModel();
        model.setRowCount(0);
        while(query.next()){
            data[0] = query.getString("codigo").toUpperCase();
            data[1] = query.getString("tipo");
            data[2] = query.getString("marca");
            data[3] = query.getString("modelo");
            data[4] = query.getString("cantidad");
            model.addRow(data);
        }
        caseTable.setModel(model);
    }
    private void fillMicaTable(ResultSet query) throws SQLException{
        String[] data = new String[5];
        
        DefaultTableModel model = (DefaultTableModel) micaTable.getModel();
        model.setRowCount(0);
        while(query.next()){
            data[0] = query.getString("codigo").toUpperCase();
            data[1] = query.getString("tipo");
            data[2] = query.getString("marca");
            data[3] = query.getString("modelo");
            data[4] = query.getString("cantidad");
            model.addRow(data);
        }
        micaTable.setModel(model);
    }
    private void fillPropTable(ResultSet query) throws SQLException{
        String[] data = new String[4];
        
        DefaultTableModel model = (DefaultTableModel) propTable.getModel();
        model.setRowCount(0);
        while(query.next()){
            data[0] = query.getString("codigo").toUpperCase();
            data[1] = query.getString("marca");
            data[2] = query.getString("descripcion");
            data[3] = query.getString("cantidad");
            model.addRow(data);
        }
        propTable.setModel(model);
    }
    private void fillPhoneTable(ResultSet query) throws SQLException{
        String[] data = new String[5];
        
        DefaultTableModel model = (DefaultTableModel) phoneTable.getModel();
        model.setRowCount(0);
        while(query.next()){
            data[0] = query.getString("codigo").toUpperCase();
            data[1] = query.getString("marca");
            data[2] = query.getString("modelo");
            data[3] = query.getString("capacidad");
            data[4] = query.getString("cantidad");
            model.addRow(data);
        }
        phoneTable.setModel(model);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel casePanel;
    private javax.swing.JTable caseTable;
    private javax.swing.JScrollPane caseTableScroll;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JPanel micaPanel;
    private javax.swing.JTable micaTable;
    private javax.swing.JScrollPane micaTableScroll;
    private javax.swing.JPanel phonePanel;
    private javax.swing.JScrollPane phoneScrollTable;
    private javax.swing.JTable phoneTable;
    private javax.swing.JPanel propPanel;
    private javax.swing.JScrollPane propScrollTable;
    private javax.swing.JTable propTable;
    private javax.swing.JButton search;
    private javax.swing.JComboBox<String> searchBy;
    private javax.swing.JLabel searchByTitle;
    private javax.swing.JTextField searchText;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
